{"version":3,"sources":["Flashcard.js","FlashcardsList.js","App.js","reportWebVitals.js","index.js"],"names":["Flashcard","flashcard","useState","flip","setFlip","height","setHeight","frontEl","useRef","backEl","setMaxHeight","frontHeight","current","getBoundingClientRect","backHeight","Math","max","useEffect","question","answer","options","window","addEventListener","removeEventListener","className","style","onClick","ref","map","option","FlashcardsList","flashcards","id","App","setFlashcards","categories","setCategories","categoryEl","amountEl","decodeString","str","textArea","document","createElement","innerHTML","value","axios","get","then","res","data","trivia_categories","onSubmit","e","preventDefault","params","amount","category","results","questionItem","index","correct_answer","incorrect_answers","a","Date","now","sort","random","icon","faChessQueen","color","size","htmlFor","name","type","min","step","defaultValue","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5c3ece8f.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nexport default function Flashcard({ flashcard }) {\r\n  const [flip, setFlip] = useState(false);\r\n\r\n  const [height, setHeight] = useState(\"initial\");\r\n\r\n  const frontEl = useRef();\r\n  const backEl = useRef();\r\n\r\n  function setMaxHeight() {\r\n    const frontHeight = frontEl.current.getBoundingClientRect().height;\r\n    const backHeight = backEl.current.getBoundingClientRect().height;\r\n    setHeight(Math.max(frontHeight, backHeight, 100));\r\n  }\r\n\r\n  useEffect(setMaxHeight, [\r\n    flashcard.question,\r\n    flashcard.answer,\r\n    flashcard.options,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", setMaxHeight);\r\n    return () => window.removeEventListener(\"resize\", setMaxHeight);\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      className={`card ${flip ? \"flip\" : \"\"}`}\r\n      style={{ height: height }}\r\n      onClick={() => setFlip(!flip)}\r\n    >\r\n      <div className=\"front\" ref={frontEl}>\r\n        {flashcard.question}\r\n        <div className=\"flashcard-options\">\r\n          {flashcard.options.map((option) => {\r\n            return (\r\n              <div className=\"flashcard-option\" key={option}>\r\n                {option}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n      <div className=\"back\" ref={backEl}>\r\n        {flashcard.answer}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Flashcard from \"./Flashcard\";\r\n\r\nexport default function FlashcardsList({ flashcards }) {\r\n  return (\r\n    <div className=\"card-grid\">\r\n      {flashcards.map((flashcard) => {\r\n        return <Flashcard flashcard={flashcard} key={flashcard.id} />;\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect, useRef } from \"react\";\nimport FlashcardsList from \"./FlashcardsList\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport { faChessQueen } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nfunction App() {\n  const [flashcards, setFlashcards] = useState([]);\n  const [categories, setCategories] = useState([]);\n\n  const categoryEl = useRef();\n  const amountEl = useRef();\n\n  useEffect(() => {\n    axios.get(\"https://opentdb.com/api_category.php\").then((res) => {\n      setCategories(res.data.trivia_categories);\n    });\n  }, []);\n\n  useEffect(() => {}, []);\n\n  function decodeString(str) {\n    const textArea = document.createElement(\"textarea\");\n    textArea.innerHTML = str;\n    return textArea.value;\n  }\n  function handleSubmit(e) {\n    e.preventDefault();\n    axios\n      .get(\"https://opentdb.com/api.php\", {\n        params: {\n          amount: amountEl.current.value,\n          category: categoryEl.current.value,\n        },\n      })\n      .then((res) => {\n        setFlashcards(\n          res.data.results.map((questionItem, index) => {\n            const answer = decodeString(questionItem.correct_answer);\n            const options = [\n              ...questionItem.incorrect_answers.map((a) => decodeString(a)),\n              answer,\n            ];\n\n            return {\n              id: `${index}-${Date.now()}`,\n              question: decodeString(questionItem.question),\n              answer: decodeString(questionItem.correct_answer),\n              options: options.sort(() => Math.random() - 0.5),\n            };\n          })\n        );\n      });\n  }\n  return (\n    <div className=\"background\">\n      <form className=\"header\" onSubmit={handleSubmit}>\n        <FontAwesomeIcon icon={faChessQueen} color=\"Dodgerblue\" size=\"2x\" />\n        <h1>Quiz App</h1>\n        <div className=\"form-group\">\n          <label htmlFor=\"category\">Category</label>\n          <select id=\"category\" ref={categoryEl}>\n            {categories.map((category) => {\n              return (\n                <option key={category.id} value={category.id}>\n                  {category.name}\n                </option>\n              );\n            })}\n          </select>\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"amount\">Number of Questions</label>\n          <input\n            type=\"number\"\n            id=\"amount\"\n            min=\"1\"\n            step=\"1\"\n            defaultValue={10}\n            ref={amountEl}\n          ></input>\n        </div>\n        <div className=\"form-group\">\n          <button className=\"btn\">Generate</button>\n        </div>\n      </form>\n      <div className=\"container\">\n        <FlashcardsList flashcards={flashcards} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}